package com.pq.dao;

import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.ext.sql.UpdateResult;
import io.vertx.rxjava.core.Vertx;
import io.vertx.rxjava.ext.jdbc.JDBCClient;
import rx.Single;

import java.util.List;

public class BaseDao {
    private static JDBCClient jdbcClient;
    private static final SQLOptions sqlOptions = new SQLOptions().setAutoGeneratedKeys(true);

    public static void createJDBCClient(JsonObject config) {
        String dbConnectionUrl = config.getString("sql_db_conn_url");
        String dbUser = config.getString("sql_db_user");
        String dbPassword = config.getString("sql_db_passwd");
        int maxJdbcPoolSize = config.getInteger("max_jdbc_poolsize");

        jdbcClient = JDBCClient.createShared(Vertx.currentContext().owner(), new JsonObject()
                .put("url", dbConnectionUrl)
                .put("user", dbUser)
                .put("password", dbPassword)
                .put("driver_class", "com.mysql.cj.jdbc.Driver")
                .put("max_pool_size", maxJdbcPoolSize).put("useSSL", false)
        );
    }

    private static Single<ResultSet> rxQuery(String query, JsonArray params) {
        return jdbcClient.rxGetConnection()
                .flatMap(sqlConnection ->
                        sqlConnection.rxQueryWithParams(query, params)
                                .doAfterTerminate(sqlConnection::close));
    }

    static Single<JsonObject> findOne(String query, JsonArray params) {
        return rxQuery(query, params)
                .flatMap(BaseDao::getResult);
    }

    private static Single<JsonObject> getResult(ResultSet resultSet) {
        if (resultSet.getRows().size() > 0)
            return Single.just(resultSet.getRows().get(0));
        return Single.just(new JsonObject());
    }

    static Single<UpdateResult> create(String query, JsonArray params) {
        return rxCreate(query, params);
    }

    static Single<Integer> update(String query, JsonArray params) {
        return rxCreate(query, params)
                .map(UpdateResult::getUpdated);
    }

    private static Single<UpdateResult> rxCreate(String query, JsonArray params) {
        return jdbcClient.rxGetConnection()
                .flatMap(sqlConnection -> {
                    sqlConnection.setOptions(sqlOptions);
                    return sqlConnection.rxUpdateWithParams(query, params)
                            .doAfterTerminate(sqlConnection::close);
                });
    }

    static Single<List<JsonObject>> find(String query, JsonArray params) {
        return rxQuery(query, params)
                .flatMap(resultSet -> Single.just(resultSet.getRows()));
    }

}
